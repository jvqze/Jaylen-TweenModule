"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[525],{8648:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Usage/GroupTweens","title":"Group Tweens","description":"Group multiple models or parts into one controller:","source":"@site/docs/Usage/GroupTweens.md","sourceDirName":"Usage","slug":"/Usage/GroupTweens","permalink":"/Jaylen-TweenModule/docs/Usage/GroupTweens","draft":false,"unlisted":false,"editUrl":"https://github.com/jvqze/Jaylen-TweenModule/edit/master/docs/Usage/GroupTweens.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"defaultSidebar","previous":{"title":"Basic Tweening","permalink":"/Jaylen-TweenModule/docs/Usage/BasicTween"},"next":{"title":"Features & Functions","permalink":"/Jaylen-TweenModule/docs/Usage/Others"}}');var s=n(4848),r=n(8453);const i={sidebar_position:4},a="Group Tweens",d={},c=[];function l(e){const o={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"group-tweens",children:"Group Tweens"})}),"\n",(0,s.jsx)(o.p,{children:"Group multiple models or parts into one controller:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-lua",children:'local Groups = TweenModule.Groups\nlocal MyFavoriteUnbiasedGroup = Groups.new(workspace.Model1, workspace.Model2)\n\nMyFavoriteUnbiasedGroup:Move("SineInOut:2", CFrame.new(0, 5, 0), true)\nMyFavoriteUnbiasedGroup:Color("OutBounce:1", Color3.fromRGB(0, 255, 0))\nMyFavoriteUnbiasedGroup:Add(workspace.Model3)\nMyFavoriteUnbiasedGroup:Remove(workspace.Model1)\n'})}),"\n",(0,s.jsx)(o.admonition,{type:"info",children:(0,s.jsxs)(o.p,{children:["All the functions you use for ",(0,s.jsx)(o.code,{children:"Models"})," & ",(0,s.jsx)(o.code,{children:"BaseParts"}),", they work with groups. The only change is that instead of using ",(0,s.jsx)(o.code,{children:".Move"}),", it would be ",(0,s.jsx)(o.code,{children:":Move"}),",\nand you don't have to identify the ",(0,s.jsx)(o.code,{children:"target"})," or ",(0,s.jsx)(o.code,{children:"instance"}),", they're already defined by the group, this is the same for the other functions."]})})]})}function u(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>a});var t=n(6540);const s={},r=t.createContext(s);function i(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);